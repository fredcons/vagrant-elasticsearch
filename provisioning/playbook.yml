---
- hosts: all
  tasks:

    - name: Update repositories
      apt_repository: repo={{ item }} state=present update_cache=yes
      with_items: elasticsearch_apt_repos

    - name:  install curl
      apt: pkg=curl state=latest

    - name:  install git
      apt: pkg=git state=latest

    - name: install tree
      apt: pkg=tree state=latest

    - name: install vim
      apt: pkg=vim state=latest

    # Accept Oracle license
    - name: Accept Oracle license prior JDK installation
      shell: echo debconf shared/accepted-oracle-license-v1-1 select true | sudo debconf-set-selections; echo debconf shared/accepted-oracle-license-v1-1 seen true | sudo debconf-set-selections creates=/usr/lib/jvm/java-7-oracle

    # Install Java
    - name: Install dependencies
      apt: pkg={{elasticsearch_apt_java_package}} state=present

    - shell: if [ -e /usr/share/elasticsearch/lib/elasticsearch-{{ elasticsearch_version }}.jar ]; then echo yes; else echo no; fi;
      register: elasticsearch_version_exists
      always_run: True

    # Download deb if needed
    - name: Download Elasticsearch deb
      get_url: url={{ elasticsearch_download_url }}/elasticsearch-{{ elasticsearch_version }}.deb dest=/tmp/elasticsearch-{{ elasticsearch_version }}.deb mode=0440
      when: elasticsearch_version_exists.stdout == 'no'

    # Uninstall previous version if applicable
    - name: Uninstalling previous version if applicable
      shell: dpkg --remove elasticsearch
      when: elasticsearch_version_exists.stdout == 'no'

    - file: path=/usr/share/elasticsearch state=absent
      when: elasticsearch_version_exists.stdout == 'no'

    # Install the deb
    - name: Install Elasticsearch deb
      shell: dpkg -i -E --force-confnew /tmp/elasticsearch-{{ elasticsearch_version }}.deb
      when: elasticsearch_version_exists.stdout == 'no'
  
    - file: path=/usr/share/elasticsearch state=directory owner={{ elasticsearch_user }} group={{ elasticsearch_group }} recurse=yes 

    - name:  install elasticsearch
      apt: pkg=elasticsearch state=latest

    - name: Installing Plugins by Name
      action: shell bin/plugin -install {{ item.name }} chdir={{ elasticsearch_home_dir }}
      when: item.url is not defined and elasticsearch_version_exists.stdout == 'no'
      with_items: elasticsearch_plugins
      ignore_errors: yes

    - name: Installing Plugins by URL
      action: shell bin/plugin -install {{ item.name }} -url {{ item.url }} chdir={{ elasticsearch_home_dir }}
      when: item.url is defined and elasticsearch_version_exists.stdout == 'no'
      with_items: elasticsearch_plugins
      ignore_errors: yes

    - file: path={{ elasticsearch_plugin_dir }}i state=directory owner={{ elasticsearch_user }} group={{ elasticsearch_group }} recurse=yes

    - name: Ensure Elasticsearch is not started on boot
      service: name=elasticsearch enabled=false

    - shell: if [ -d "/opt/kibana-{{ kibana_version }}-linux-x64" ]; then echo yes; else echo no; fi;
      register: kibana_version_exists
      always_run: True

    - name: Create service account for Kibana
      user: name=kibana
            system=yes
            home=/var/lib/kibana
            shell=/bin/false

    - name: Touch log file if it does not exist
      command: touch {{ kibana_log }} creates={{ kibana_log }}

    - name: Set log file permissions
      file: path={{ kibana_log }} owner=kibana group=kibana mode=0644

    - name: Copy kibana archive
      get_url: url=https://download.elastic.co/kibana/kibana/kibana-{{Â kibana_version }}-linux-x64.tar.gz dest=/tmp/kibana-{{ kibana_version }}-linux-x64.tar.gz mode=0440
      when: kibana_version_exists.stdout == 'no'

    - name: Uncompress kibana archive
      shell: "tar -xzvf kibana-{{ kibana_version }}-linux-x64.tar.gz -C /opt/"
      when: kibana_version_exists.stdout == 'no'
      args:
        chdir: /tmp  

    - name: Symlink kibana version
      file: src="/opt/kibana-{{ kibana_version }}-linux-x64" dest="/opt/kibana" state="link"
      when: kibana_version_exists.stdout == 'no'

    - name: Configure Kibana service definition
      template: src=templates/kibana.conf.j2 dest=/etc/init/kibana.conf

    - name: Ensure kibana is not started at boot
      service: name=kibana enabled=false 

    - name: Download jq
      get_url: url=http://stedolan.github.io/jq/download/linux64/jq dest=/usr/local/bin/jq mode=0755 

    - name: Install es2unix
      shell: "curl http://download.elasticsearch.org/es2unix/es > /usr/bin/es"

    - name: es2unix permissions
      shell : "chmod a+x /usr/bin/es"

    - name: scripts folder
      file: path=~{{user}}/scripts state=directory owner={{user}} group={{user}} mode=0777

    - name: queries folder
      file: path=~{{user}}/scripts/queries state=directory owner={{user}} group={{user}} mode=0777

    - name: crunchbase config dir
      file: path=/etc/crunchbase state=directory owner=root group=root mode=0777

    - name: crunchbase schema file 
      copy: src=files/mappings.json dest=/etc/crunchbase/mappings.json owner=root group=root mode=0755   

    - name: crunchbase data file
      copy: src=files/companies.bulk.json dest=/etc/crunchbase/companies.bulk.json owner=root group=root mode=0755

    - name: crunchbase load script
      copy: src=files/scripts/load_crunchbase.sh dest=~{{user}}/scripts/load_crunchbase.sh owner={{user}} group={{user}} mode=0755

    - name: reuters config dir
      file: path=/etc/reuters state=directory owner=root group=root mode=0777

    - name: reuters schema file
      copy: src=files/mappings-reuters.json dest=/etc/reuters/mappings.json owner=root group=root mode=0755

    - name: reuters data file
      copy: src=files/articles.bulk.json dest=/etc/reuters/articles.bulk.json owner=root group=root mode=0755

    - name: reuters load script
      copy: src=files/scripts/load_reuters.sh dest=~{{user}}/scripts/load_reuters.sh owner={{user}} group={{user}} mode=0755

    - name: install zsh
      apt: pkg=zsh state=present

    - name: install oh-my-zsh
      git: repo=https://github.com/robbyrussell/oh-my-zsh dest=~/.oh-my-zsh
      sudo: false

    - name: See if zshrc exists
      stat: path=~{{user}}/.zshrc
      register: zshrc_installed
      sudo: false

    - name: Backing up existing ~/.zshrc
      command: mv ~{{user}}/.zshrc ~{{user}}/.zshrc.orig
      when: zshrc_installed.stat.exists
      sudo: false

    - name: Creating new ~/.zshrc
      command: cp ~{{user}}/.oh-my-zsh/templates/zshrc.zsh-template ~{{user}}/.zshrc
      sudo: false

    - name: switch to ZSH
      user: name={{user}} shell=/usr/bin/zsh
      sudo: True

    - name: clustering search script
      copy: src=files/scripts/search_clusters.sh dest=~{{user}}/scripts/search_clusters.sh owner={{user}} group={{user}} mode=0755

    - name: clustering search query
      copy: src=files/scripts/queries/search_clusters_query.json dest=~{{user}}/scripts/queries/search_clusters_query.json owner={{user}} group={{user}} mode=0755

